{"version":3,"sources":["Components/Elements.jsx","App.js","serviceWorker.js","index.js"],"names":["Elements","props","toCompare","type","unit","elements","quantity","map","element","index","key","className","style","transform","length","array","i","push","unshift","arrayGenerator","Number","isInteger","j","k","ordinal","App","days","months","time","Date","state","year","getFullYear","monthName","getMonth","monthNbr","date","getDate","hour","getHours","minute","getMinutes","second","getSeconds","dayName","getDay","dayNbr","setInterval","thisInstant","setState","month","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e9ed8c5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst addZero = element => {\r\n    if (Number.isInteger(element) && element < 10) {\r\n        element = `0${element}`;\r\n    }\r\n    return element;\r\n};\r\n\r\nconst ordinal = (index, unit) => {\r\n    if (unit === \"th\") {\r\n        let j = index % 10;\r\n        let k = index % 100;\r\n\r\n        if (j === 1 && k !== 11) {\r\n            unit = \"st\";\r\n        }\r\n        if (j === 2 && k !== 12) {\r\n            unit = \"nd\";\r\n        }\r\n        if (j === 3 && k !== 13) {\r\n            unit = \"rd\";\r\n        }\r\n    }\r\n    return unit;\r\n};\r\n\r\nconst arrayGenerator = quantity => {\r\n    let array = [];\r\n    if (quantity === 60) {\r\n        let i = 0;\r\n\r\n        do {\r\n            array.push(i);\r\n            i += 1;\r\n        } while (i < quantity);\r\n    } else {\r\n        let i = quantity;\r\n\r\n        do {\r\n            array.unshift(i);\r\n            i -= 1;\r\n        } while (i > 0);\r\n    }\r\n    return array;\r\n};\r\n\r\nconst Elements = props => {\r\n    const toCompare = props.toCompare;\r\n    const type = props.type;\r\n    const unit = props.unit;\r\n    const elements = props.elements;\r\n    const quantity = props.quantity;\r\n\r\n    if (elements) {\r\n        return (\r\n            <div>\r\n                {elements.map((element, index) => {\r\n                    return (\r\n                        <div\r\n                            key={index}\r\n                            className={`${type} item ${\r\n                                index === toCompare ? \"active\" : \"\"\r\n                            }`}\r\n                            style={{\r\n                                transform: `rotate(${index *\r\n                                    (360 / elements.length) -\r\n                                    (360 / elements.length) * toCompare}deg)`\r\n                            }}\r\n                        >\r\n                            <p>{`${element}`}</p>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    } else if (quantity) {\r\n        const array = arrayGenerator(quantity);\r\n\r\n        return (\r\n            <div>\r\n                {array.map(index => {\r\n                    return (\r\n                        <div\r\n                            key={index}\r\n                            className={`${type} item ${\r\n                                index === toCompare ? \"active\" : \"\"\r\n                            }`}\r\n                            style={{\r\n                                transform: `rotate(${index * (360 / quantity) -\r\n                                    (360 / quantity) * toCompare}deg)`\r\n                            }}\r\n                        >\r\n                            <p>{`${addZero(index)} ${ordinal(index, unit)}`}</p>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport default Elements;\r\n","import React from \"react\";\r\nimport Elements from \"./Components/Elements\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n    days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n    months = [\r\n        \"Jan\",\r\n        \"Feb\",\r\n        \"Mar\",\r\n        \"Apr\",\r\n        \"May\",\r\n        \"Jun\",\r\n        \"Jul\",\r\n        \"Aug\",\r\n        \"Sep\",\r\n        \"Oct\",\r\n        \"Nov\",\r\n        \"Dec\"\r\n    ];\r\n    constructor() {\r\n        super();\r\n        const time = new Date();\r\n\r\n        this.state = {\r\n            year: time.getFullYear(),\r\n            // month: time.toLocaleString(\"en\", {\r\n            //     month: \"short\"\r\n            // }),\r\n            monthName: this.months[time.getMonth()],\r\n            monthNbr: time.getMonth(),\r\n            date: time.getDate(),\r\n            hour: time.getHours(),\r\n            minute: time.getMinutes(),\r\n            second: time.getSeconds(),\r\n            dayName: this.days[time.getDay()],\r\n            dayNbr: time.getDay()\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const tick = () => {\r\n            let thisInstant = new Date();\r\n            this.setState({\r\n                year: thisInstant.getFullYear(),\r\n                // month: thisInstant.toLocaleString(\"en\", {\r\n                //     month: \"short\"\r\n                // }),\r\n                monthName: this.months[thisInstant.getMonth()],\r\n                monthNbr: thisInstant.getMonth(),\r\n                date: thisInstant.getDate(),\r\n                hour: thisInstant.getHours(),\r\n                minute: thisInstant.getMinutes(),\r\n                second: thisInstant.getSeconds(),\r\n                dayName: this.days[thisInstant.getDay()],\r\n                dayNbr: thisInstant.getDay()\r\n            });\r\n        };\r\n        setInterval(tick, 1000);\r\n    }\r\n\r\n    render() {\r\n        const daysInMonth = (year, month) => new Date(year, month, 0).getDate();\r\n        const months = [\r\n            \"Jan\",\r\n            \"Feb\",\r\n            \"Mar\",\r\n            \"Apr\",\r\n            \"May\",\r\n            \"Jun\",\r\n            \"Jul\",\r\n            \"Aug\",\r\n            \"Sep\",\r\n            \"Oct\",\r\n            \"Nov\",\r\n            \"Dec\"\r\n        ];\r\n        const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\n        const nbrOfHours = 24;\r\n        const nbrOfMinutes = 60;\r\n        const nbrOfSeconds = 60;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"year\">\r\n                    <p>{this.state.year}</p>\r\n                </div>\r\n                <div className=\"days\">\r\n                    <Elements\r\n                        toCompare={this.state.dayNbr}\r\n                        elements={days}\r\n                        type=\"day\"\r\n                    />\r\n                </div>\r\n                <div className=\"months\">\r\n                    <Elements\r\n                        toCompare={this.state.monthNbr}\r\n                        elements={months}\r\n                        type=\"month\"\r\n                    />\r\n                </div>\r\n                <div className=\"dates\">\r\n                    <Elements\r\n                        toCompare={this.state.date}\r\n                        quantity={daysInMonth(\r\n                            this.state.year,\r\n                            this.state.monthNbr + 1\r\n                        )}\r\n                        type=\"date\"\r\n                        unit=\"th\"\r\n                    />\r\n                </div>\r\n                <div className=\"hours\">\r\n                    <Elements\r\n                        toCompare={this.state.hour}\r\n                        quantity={nbrOfHours}\r\n                        type=\"hour\"\r\n                        unit=\"h\"\r\n                    />\r\n                </div>\r\n                <div className=\"minutes\">\r\n                    <Elements\r\n                        toCompare={this.state.minute}\r\n                        quantity={nbrOfMinutes}\r\n                        type=\"minute\"\r\n                        unit=\"m\"\r\n                    />\r\n                </div>\r\n                <div className=\"seconds\">\r\n                    <Elements\r\n                        toCompare={this.state.second}\r\n                        quantity={nbrOfSeconds}\r\n                        type=\"second\"\r\n                        unit=\"s\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}